패키지 설치 및 관리를 위해 poetry를 사용한다.(=pip) pip보다 관계관리에 편리하다.
poetry를 설치한다. (https://python-poetry.org/docs)
$ curl -sSL https://install.python-poetry.org | python3 -
그리고 터미널을 죽인 후에 터미널을 다시 열고 poetry를 실행시킨다. (vscode에선 쓰래기통 아이콘을 클릭해서 kill terminal 할 수 있다.)

가상환경(shell)을 생성하여 shell내에 django를 설치해준다. 컴퓨터 전역에 django를 설치하지 않기위해서다.

poetry를 설치해준다.
$ poetry init
    여러 질문형식으로 값을 넣어주면 알아서 설정해준다.
    전부 엔터를 쳐주고 마지막에 no no yes를 넣어준다.(라이센스는 MIT)
pyproject.toml 파일이 생성되며 설정내용은 구현되어있다.

poetry를 통해 django를 설치한다.
$ poetry add django
poetry.lock이 생성된다. 코드가 실행된 환경에 대한 정보를 담고 있다.
poetry.toml tool부분에 django내용이 추가된다.
    poetry.lock, poetry.toml 파일을 읽어서 shell이 만들어 진다.

poetry shell안에서 django를 사용 가능하다.
poetry shell안으로 들어간다. (django 는 airbnb-clone-backend 폴더 안에 만든 poetry 방울 안에만 설치되어 있다!)
$ poetry shell   

django사용가능하여, 명령어를 확인 가능하다.
$ django-admin

프로젝트를 실행해준다. 보통은 프로젝트생성하면서 디렉토리도 같이 생성하지만 poetry초기화를 위해서 미리 디렉토리를 생성했다.
$ django-admin startproject [프로젝트명='config'] .
프로젝트 폴더와 manage.py 이 생성된다.

